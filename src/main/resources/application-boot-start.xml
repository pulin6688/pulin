<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	 xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/mvc  
     	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">


	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc_url}" />
      <property name="username" value="${jdbc_user}" />
      <property name="password" value="${jdbc_password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  </bean>
	<!-- 动态数据源 -->
	<bean id="dataSource" class="com.keruyun.gateway.commons.jdbc.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
			    <!-- write -->  
				<entry key="master" value-ref="dataSource" />
				<!-- read -->
				<entry key="slave" value-ref="dataSource" />
			</map>
		</property>
		<!-- 默认的数据源 -->
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>

	<bean id="aspectBean" class="com.keruyun.gateway.commons.jdbc.datasource.DynamicDataSourceAspect"></bean>

	<aop:config>
		<aop:aspect id="dataSourceAspect" ref="aspectBean">
			
			<aop:before method="beforeService"
				pointcut="execution(* com.keruyun.gateway.open.service.*.*(..))" />

			<aop:after method="afterService"
			    pointcut="execution(* com.keruyun.gateway.open.service.*.*(..))" />

		</aop:aspect>
	</aop:config>

	<!-- jdbc注入 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- jedis pool config start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大连接数 -->
		<property name="maxTotal" value="${redis.pool.maxTotal}"/>
		<!--最大空闲连接数 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}"/>
		<!--初始化连接数 -->
		<property name="minIdle" value="${redis.pool.minIdle}"/>
		<!--最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
		<!--对拿到的connection进行validateObject校验 -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
		<!--在进行returnObject对返回的connection进行validateObject校验 -->
		<!-- <property name="testOnReturn" value="${redis.pool.testOnReturn}" /> -->
		<!--定时对线程池中空闲的链接进行validateObject校验 -->
		<!-- <property name="testWhileIdle" value="true" /> -->
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
		<constructor-arg index="0" ref="jedisPoolConfig"/>
		<constructor-arg index="1" value="${redis.master.urls}" type="java.net.URI"/>
		<constructor-arg index="2" value="${redis.master.timeout}"/>
	</bean>

	<bean id="jedisClient" class="com.keruyun.gateway.commons.nosql.redis.client.JedisClient">
		<property name="jedisPool" ref="jedisPool"></property>
	</bean>

	<import resource="mongodb.xml"/>
	<import resource="jms.xml"/>
</beans>